import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'io.freefair.lombok' version '5.3.3.3'
}

group = 'com.discordsrv'
version = '1.0.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    // Spigot & PlaceholderAPI
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }

    // DiscordSRV
    maven { url 'https://nexus.scarsz.me/content/groups/public/' }
    maven { url 'https://nexus.vankka.dev/repository/maven-public/' }
    maven { url 'https://m2.dv8tion.net/releases/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    // Bukkit
    compileOnly 'org.bukkit:bukkit:1.12.2-R0.1-SNAPSHOT'

    // PlaceholderAPI
    compileOnly 'me.clip:placeholderapi:2.10.9'

    // DiscordSRV
    compileOnly 'com.discordsrv:discordsrv:1.23.0'

    // Config
    implementation 'github.scarsz:configuralize:1.3.2'

    // Commons
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-lang3:3.5'

    // SpEL
    implementation 'org.springframework:spring-expression:5.2.7.RELEASE'

    // discord-webhooks
    implementation 'club.minnced:discord-webhooks:0.5.7'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [VERSION: project.version]
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jar {
    dependsOn licenseFormat
    finalizedBy shadowJar
}

shadowJar {
    relocate 'org.springframework.expression', 'com.discordsrv.alerts.dependencies.org.springframework.expression'
    relocate 'org.apache', 'com.discordsrv.alerts.dependencies.org.apache'
    relocate 'alexh', 'com.discordsrv.alerts.dependencies.alexh'
    relocate 'club.minnced.discord.webhook', 'com.discordsrv.alerts.dependencies.webhook'

    //noinspection GroovyAssignabilityCheck
    archiveClassifier = ''
}

license {
    header = rootProject.file('LICENSE_HEADER')
    properties {
        String inception = '2021'
        String currentYear = Calendar.getInstance().get(Calendar.YEAR)

        year = inception == currentYear ? currentYear : inception + '-' + currentYear
    }
    include '**/*.java' // only java files
}
